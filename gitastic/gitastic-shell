#!/usr/bin/python
import sys, os, subprocess, shlex
from storm.exceptions import NotOneError
from lib.shellutils import die
from lib import gitastic, database

if len(sys.argv)==3:
    #An optional config parameter allows loading the config from somewhere else
    #This is necessary for unit testing. DO NOT USE IN PRODUCTION PLEASE
    gitastic.configDir=sys.argv.pop()

gitastic.init()

try:
    program, keyid=sys.argv
    command=shlex.split(os.environ["SSH_ORIGINAL_COMMAND"])
    key=database.getStore().find(database.UserSSHKey, database.UserSSHKey.user_ssh_key_id==int(keyid)).one()
    if not key:
        raise NotOneError
except ValueError:
    die("Need a keyid")
except KeyError:
    die("No SSH_ORIGINAL_COMMAND present")
except NotOneError:
    die("Your SSH key is not recognized")

actions=("git-receive-pack", "git-upload-pack")
if command[0] not in actions:
    die("Command must be one of %s (%s was given)", ", ".join(actions), command[0])

repo=database.Repository.findByPath(command[-1])
if not repo:
    die("Repository does not exist: %s", command[-1])

if not repo.getAccess(key.user)&repo.PERM_CLONE:
    if not repo.public:
        #This is the more common scenario, if a repo is public you should be able to clone
        die("Repository does not exist: %s", command[-1])
    else:
        die("You do not have permission to clone this repository")

if command[0]=="git-receive-pack" and not repo.getAccess(key.user)&repo.PERM_PUSH:
    die("You do not have permission to push to this repository")

subprocess.call([gitastic.config.get("Repository/Git", do_except=True), "shell", "-c", " ".join(command[:-1]+["'"+repo.getRepositoryDir()+"'"])])