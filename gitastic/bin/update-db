#!/usr/bin/python
import sys
import os
import getpass
import furl
import glob
from storm.locals import *
from storm.exceptions import ProgrammingError
from datetime import datetime

def die(message, *args, **kwargs):
    sys.stderr.write((message+"\n")%args)
    sys.exit(kwargs["code"] if "code" in kwargs else 1)

def get_input(prompt=None, default=None, require=False, restrict=None):
    _prompt=prompt or ""
    if _prompt:
        if restrict:
            _prompt+=" (%s)"%(",".join(restrict),)
        if default:
            _prompt+=" [%s]"%(str(default),)
        _prompt+=": "
    while True:
        data=raw_input(_prompt) or default
        if not data:
            if require:
                sys.stderr.write("An answer is required\n")
                continue
        if data:
            if restrict:
                if data not in restrict:
                    sys.stderr.write("Answer must be one of %s\n"%(", ".join(restrict),))
                    continue
        return data

if len(sys.argv)>1:
    uri=furl.furl(sys.argv[1])
else:
    uri=furl.furl("")

uri.scheme=uri.scheme or get_input("Scheme", default="mysql", require=True, restrict=["mysql", "postgres", "sqlite"])
uri.username=uri.username or get_input("Username")
uri.password=uri.password or (getpass.getpass("Password: ") or None)
uri.host=uri.host or get_input("File" if uri.scheme=="sqlite" else "Host", default=":memory:" if uri.scheme=="sqlite" else "localhost", require=True)
uri.path=str(uri.path) or (None if uri.scheme=="sqlite" else get_input("Database", require=False if uri.scheme=="sqlite" else True))

database=create_database(str(uri))
store=Store(database)

sys.path.insert(0, os.path.join(os.path.dirname(os.path.dirname(__file__)), "schema"))
schemas=__import__(uri.scheme).schema
del(sys.path[0])

schema_change_id, applied_date, schema_version=None, None, -1
try:
    schema_change_id, applied_date, schema_version=store.execute("select schema_change_id,applied_date,schema_version from schema_change order by schema_version desc limit 1").get_one()
except ProgrammingError as e:
    sys.stderr.write("The server says: %s\n"%(str(e),))
except TypeError as e:
    sys.stderr.write("The server says: %s\n"%(str(e),))
    sys.stderr.write("This probably means that the schema_change table exists but is not populated.  Recommend dropping all tables and retrying.\n")

print "Current schema version is %d applied %s"%(schema_version, applied_date)
if schema_version==max(schemas.keys()):
    print "The database is up to date"
    sys.exit(0)
elif schema_version>max(schemas.keys()):
    sys.stderr.write("WARNING: Database schema %d is higher than max schema version %d\n"%(schema_version, max(schemas.keys())))
    sys.exit(1)

for new_schema_version in range(schema_version+1, max(schemas.keys())+1):
    new_schema_date=None
    try:
        print "Executing query (%d):\n%s\n\n"%(new_schema_version, schemas[new_schema_version])
        store.execute(schemas[new_schema_version])
        store.commit()
    except:
        sys.stderr.write("Failed to update to schema version %d of %d\n"%(new_schema_version, max(schemas.keys())))
        raise

    try:
        new_schema_date=datetime.utcnow().replace(microsecond=0).isoformat()
        store.execute("insert into schema_change (applied_date, schema_version) values ('%s', %d);"%(new_schema_date, new_schema_version))
        store.commit()
        schema_version=new_schema_version
        applied_date=new_schema_date
    except:
        sys.stderr.write("Applied schema but failed to update schema change table with latest database version: %d at %s\n"%(new_schema_version, new_schema_date))
        raise

print "New schema version is %d applied %s"%(schema_version, applied_date)